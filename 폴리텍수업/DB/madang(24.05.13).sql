--1 DISTINCT는 끝까지 해당
SELECT DISTINCT PUBLISHER, BOOKID
FROM BOOK;
--2 가격이 10000,20000,30000 아닌도서정보
SELECT *
FROM BOOK
WHERE NOT PRICE  IN(10000, 20000, 30000);
--3 고객전화번호순 고객정보
SELECT * FROM CUSTOMER ORDER BY PHONE DESC;
--4 고객수
SELECT COUNT(*) FROM CUSTOMER;
--5 주문수
SELECT COUNT(*) FROM ORDERS;
--6 도서수
SELECT COUNT(*) FROM BOOK;
--7 주문받은 도서종류 수: 같은 도서이면 하나로 보자 =>중복제거 후 개수 세기
SELECT COUNT( DISTINCT BOOKID) FROM ORDERS;
--8 출판사 수 : 같은 출판사이면 하나로 보자 =>중복제거 후 개수 세기
SELECT COUNT(DISTINCT PUBLISHER) FROM BOO
--9 출판사별 도서수 : 모아야 산다! => 모아서 세기
SELECT PUBLISHER, COUNT(*)
FROM BOOK
GROUP BY PUBLISHER;
--10 가격별 도서 수를 가격역순 정렬
SELECT PRICE, COUNT(*)
FROM BOOK
GROUP BY PRICE
ORDER BY PRICE;
--11 고객별 주문액(고객번호)
SELECT CUSTID, SUM(SALEPRICE)
FROM ORDERS
GROUP BY CUSTID
ORDER BY CUSTID;
--12 고객별 총 주문액(고객명)
SELECT NAME, SUM(SALEPRICE)
FROM ORDERS O JOIN CUSTOMER C ON(O.CUSTID=C.CUSTID)
GROUP BY NAME
ORDER BY NAME;

--13 도서별 총 주문액, 2권이상 판매된 도서대상, 도서번호순
SELECT BOOKID, SUM(SALEPRICE)
FROM ORDERS
GROUP BY BOOKD
HAVING COUNT(*) >=2
ORDER BY BOOKID;
--14 도서별 총 주문액, 2권이상 판매된 도서대상, 도서명순
SELECT BOOKID, SUM(SALEPRICE)
FROM ORDERS O JOIN BOOK B ON(B.BOOKID = O.BOOKID)
GROUP BY BOOKNAME
HAVING COUNT(*) >=2
ORDER BY BOOKNAME;
--15 고객번호별 주문건수, 총주문액, 평균 주문액, 최고 주문액, 최소 주문액
SELECT CUSTID, COUNT(*), SUM(SALEPRICE), AVG(SALEPRICE), MAX(SALEPRICE), MIN(SALEPRICE)
FROM ORDERS
GROUP BY CUSTID;
--16 고객명별 주문건수, 총주문액, 평균 주문액, 최고 주문액, 최소 주문액(단, 주문 건수 2건 이상)
-- 고객명순
SELECT NAME, COUNT(*) AS 주문건수, SUM(SALEPRIEC) AS 총주문액, 
          AVG(SALEPRICE) AS "평균 주문액", MAX(SALEPRICE) AS "최고 주문액", 
          MIN(SALEPRICE) AS "최소 주문액"
FROM CUSTOMER C JOIN ORDERS O ON(C.CUSTID=O.CUSTID)
GROUP BY NAME
HAVING COUNT(*) >=2
ORDER BY NAME;

--17 판매가격이 8000원 이상인 도서 구매한 고객별 주문 도서 수량
--단, 두권이상 구매한 고객 대상, 고객번호순
SELECT CUSTID, COUNT(*) AS 주문건수
FROM ORDERS
WHERE SALEPRICE >=8000
GROUP BY CUTID
HAVING COUNT(*) >=2
ORDER BY CUSTID;
--18 17번과 동일하되, 주문건수 역순
SELECT CUSTID, COUNT(*) AS 주문건수
FROM ORDERS
WHERE SALEPRICE >=8000
GROUP BY CUSTID
HAVING COUNT(*) >=2
ORDER BY 주문건수;

SELECT CUSTID, COUNT(*) AS 주문건수
FROM ORDERS
WHERE SALEPRICE >=8000
GROUP BY CUSTID
HAVING COUNT(*) >=2
ORDER BY 2;

--19 고객번호, 고객명, 주문건수
SELECT  NAME, C.CUSTID, COUNT(*)
FROM CUSTOMER C JOIN ORDERS O ON(C.CUSTID=O.CUSTID)
GROUP BY C.CUSTID, NAME
ORDER BY NAME;

--20 CROSS JOIN
SELECT * FROM CUSTOMER, ORDERS;
SELECT * FROM CUSTOMER CROSS JOIN ORDERS;
--21 NATURAL JOIN
SELECT * FROM CUSTOMER NATURAL JOIN ORDERS;
--22 JOIN ON 고객명과 주문한 도서가격
SELECT * FROM CUSTOMER C JOIN ORDERS O ON(C.CUSTID=O.CUSTID);
--23 ,WHERE 고객명과 주문한 도서가격
SELECT * FROM CUSTOMER C , ORDERS O  WHERE C.CUSTID=O.CUSTID;

--24 고객명, 도서명, 판매가격, 주문일
SELECT NAME, BOOKNAME, SALEPRICE, ORDERDATE
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID) JOIN BOOK C ON(B.BOOKID=C.BOOKID);

--25 주문일별 판매건수, 총 주문액을 최근 주문일부터
SELECT ORDERDATE, COUNT(*), SUM(SALEPRICE)
FROM ORDERS
GROUP BY ORDERDATE
ORDER BY ORDERDATE DESC;

--26 외부조인은 무엇이며 왜 필요한가?
--두 테이블에서 한쪽에는 데이터가 있고, 다른 쪽에는 데이터가 없는 경우, 데이터가 있는 쪽 테이블의 내용을
--모두 출력. 조건에 맞지 않아도 해당되는 행을 출력하고 싶은 경우 사용

--27 모든 도서번호, 판매된 날짜, 판매가 출력(왼쪽 외부조인 : left outer join)
SELECT A.BOOKID, BOOKNAME, ORDERDATE, SALEPRICE
FROM BOOK A LEFT JOIN ORDERS B ON(B.BOOKID = A.BOOKID);

SELECT A.BOOKID, BOOKNAME, ORDERDATE, SALEPRICE
FROM BOOK A, ORDERS B 
WHERE A.BOOKID=B.BOOKID(+);

--28 모든 도서번호, 판매된 날짜, 판매가 출력(오른쪽 외부조인 : right outer join)
SELECT A.BOOKID, BOOKNAME, ORDERDATE, SALEPRICE
FROM ORDERS B RIGHT JOIN BOOK A ON(B.BOOKID = A.BOOKID);

SELECT A.BOOKID, BOOKNAME, ORDERDATE, SALEPRICE
FROM BOOK A, ORDERS B 
WHERE A.BOOKID(+)=B.BOOKID;

--29 FULL OUTER JOIN 짝이 없더라고 양쪽 다 출력
SELECT A.BOOKID, BOOKNAME, ORDERDATE, SALEPRICE
FROM ORDERS B RIGHT JOIN BOOK A ON(A.BOOKID=B.BOOKID);

--30 LEFT OUTER JOIN UNION RIGHT JOIN => FULL OUTER JOIN
SELECT * FROM BOOK A LEFT JOIN ORDERS B ON A.BOOKID=B.BOOKID
UNION
SELECT * FROM BOOK A RIGHT JOIN ORDERS B ON A.BOOKID=B.BOOKID;

--31 도서를 구매하지 않은 고객 포함해서 고객명, 판매가
SELECT NAME, SALEPRICE
FROM CUSTOMER A LEFT JOIN ORDERS B ON(B.CUSTID = A.CUSTID);

--34 최고 정가인 도서명
SELECT BOOKNAME
FROM BOOK
WHERE PRICE = MAX(PRICE);  ---X

SELECT BOOKNAME
FROM BOOK
WHERE PRICE = (SELECT MAX(PRICE)
                FROM BOOK);
                
--35 최고 판매가 책을 구매한 고객번호
SELECT CUSTID
FROM ORDERS
WHERE SALEPRICE = (SELECT MAX(SALEPRICE)
                    FROM ORDERS);
                  
--36 최고 판매가 책을 구매한 고객명


--37 최고판매가로 팔린 도서명과 출판사
SELECT BOOKNAME, PUBLISHER
FROM ORDERS A JOIN BOOK B ON(B.BOOKID = A.BOOKID)
WHERE SALEPRICE =(SELECT MAX(SALEPRICE)
                  FROM ORDERS);
                  
--38 평균 판매가 이상에 팔린 도서번호, 도서명(SUB QUERY)
SELECT A.BOOKID, BOOKNAME 
FROM BOOK A JOIN ORDERS B ON(A.BOOKID= B.BOOKID) 
WHERE SALEPRICE >=(SELECT  AVG(SALEPRICE) 
                    FROM ORDERS );

--39 도서를 구매한 고객명(JOIN, SUBQUERY)
SELECT DISTINCT NAME
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID);

SELECT NAME 
FROM CUSTOMER 
WHERE CUSTID IN(SELECT CUSTID
                FROM ORDERS);

--40 팔린 도서명(JOIN, SUB QUERY)
SELECT DISTINCT BOOKNAME
FROM BOOK JOIN ORDERS ON(ORDERS.BOOKID = BOOK.BOOKID);

SELECT BOOKNAME
FROM BOOK WHERE BOOKID IN(SELECT BOOKID
                          FROM ORDERS);

--41 안팔린 도서명(외부조인, SUB QUERY)
SELECT BOOKNAME
FROM BOOK A LEFT JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE ORDERID IS NULL;

SELECT BOOKNAME
FROM BOOK
WHERE BOOKID NOT IN(SELECT BOOKID
                    FROM ORDERS);

--42 주문하지 않은 고객명(외부조인, SUBQUERY)
SELECT NAME
FROM CUSTOMER A LEFT JOIN ORDERS B ON(A.CUSTID = B.CUSTID)
WHERE ORDERID IS NULL;

--45 2권 이상 구매한 고객번호
SELECT CUSTID
FROM ORDERS
GROUP BY CUSTID
HAVING COUNT(*) >= 2;

--46 2권 이상 구매한 고객명
SELECT NAME
FROM ORDERS A JOIN CUSTOMER B ON(B.CUSTID = A.CUSTID)
GROUP BY NAME
HAVING COUNT(*) >= 2;

--47 대한민국에 사는 고객이 구매한 도서명(조인, 서브쿼리)
SELECT BOOKNAME
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE C.ADDRESS LIKE '%대한민국%';

--1. 대한민국 고객번호
SELECT CUSTID
FROM CUSTOMER
WHERE ADDRESS LIKE '%대한민국%';

--2. 그 고객이 구매한 도서번호
SELECT BOOKID
FROM ORDERS
WHERE CUSTID IN(SELECT CUSTID
                FROM CUSTOMER
                WHERE ADDRESS LIKE '%대한민국%');

--3. 그 도서번호에 해당되는 도서명
SELECT BOOKNAME
FROM BOOK
WHERE BOOKID IN(SELECT BOOKID
                FROM ORDERS
                WHERE CUSTID IN(SELECT CUSTID
                                FROM CUSTOMER
                                WHERE ADDRESS LIKE '%대한민국%'));

--48 대한미디어에서 출판한 도서를 구매한 고객명(조인,서브쿼리)
SELECT C.NAME
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE PUBLISHER LIKE '%대한미디어%';

--1 대한미디어 출판사의 도서번호
SELECT BOOKID
FROM BOOK
WHERE PUBLISHER LIKE '대한미디어';

--2 그 도서를 구매한 고객번호
SELECT CUSTID
FROM ORDERS
WHERE BOOKID IN(SELECT BOOKID
                FROM BOOK
                WHERE PUBLISHER LIKE '대한미디어');
                
--3 그 고객번호를 이용해서 고객명
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID
                FROM ORDERS
                WHERE BOOKID IN(SELECT BOOKID
                                FROM BOOK
                                WHERE PUBLISHER LIKE '대한미디어'));

--49 도서 평균 판매가(ORDERS)
SELECT AVG(SALEPRICE)
FROM ORDERS;

--50 도서 평균 판매가 이상으로 팔린 도서번호(ORDERS)
SELECT BOOKID
FROM ORDERS
WHERE SALEPRICE >= (SELECT AVG(SALEPRICE)
                    FROM ORDERS);

--51 도서 평균 정가(BOOK)
SELECT AVG(PRICE)
FROM BOOK;

--52 도서 평균 정가보다 비싼 도서명(BOOK)
SELECT BOOKNAME
FROM BOOK
WHERE PRICE >= (SELECT AVG(PRICE)
                FROM BOOK);

--53 출판사별로 출판사의 평균 도서 정가보다 비싼 도서명(BOOK)
SELECT BOOKNAME
FROM BOOK B1
WHERE PRICE > (SELECT AVG(PRICE)
                FROM BOOK B2
                WHERE B1.PUBLISHER = B2.PUBLISHER);

--54 주문 안한 고객명(MINUS)
--전체 고객명
--MINUS
--주문한 고객명;

SELECT NAME FROM CUSTOMER
MINUS
SELECT NAME FROM CUSTOMER WHERE CUSTID IN(SELECT CUSTID FROM ORDERS);

--55 주문한 고객의 이름과 주소
--1 조인
SELECT NAME, ADDRESS
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID);

--2 부속질의(SUB QUERY)
--(1 주문한 고객번호
SELECT CUSTID 
FROM ORDERS;
--2) 그 고객의 이름과 주소
SELECT NAME, ADDRESS
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID 
                FROM ORDERS);
--3 EXISTS
SELECT NAME, ADDRESS
FROM CUSTOMER A
WHERE EXISTS(SELECT * 
              FROM ORDERS B 
              WHERE A.CUSTID=B.CUSTID);
              
--57 TEST13 테이블 생성
--BOOKID 숫자 기본키
--BOOKNAME 가변형문자 20자
--PUBLISHER 가변형문자 20자
--PRICE 숫자 기본값 10000

CREATE TABLE TEST13 (
  BOOKID NUMBER PRIMARY KEY,
  BOOKNAME VARCHAR2(20),
  PUBLISHER VARCHAR2(20),
  PRICE NUMBER DEFAULT 10000 CHECK(PRICE >= 10000));
  
--58 TEST13 테이블 삭제
DROP TABLE TEST13;

--59 57번을 이용하되 BOOKNAME과 PUBLISHER를 기본키로 생성
CREATE TABLE TEST13 (
  BOOKID NUMBER,
  BOOKNAME VARCHAR2(20),
  PUBLISHER VARCHAR2(20),
  PRICE NUMBER DEFAULT 10000 CHECK(PRICE >= 10000),
  PRIMARY KEY(BOOKNAME, PUBLISHER)
  );
  
--60 TEST13 -> BOOK13으로 이름 변경
RENAME TEST13 TO BOOK13;

--61 BOOK13테이블의 BOOKID를 VARCHAR2(10)로 변경
ALTER TABLE BOOK13 MODIFY BOOKID VARCHAR2(10);

--62 ISBN 칼럼(열) 가변형 13자로 추가
ALTER TABLE BOOK13 ADD ISBN VARCHAR2(13);

--63 ISBN 칼럼 삭제
ALTER TABLE BOOK13 DROP COLUMN ISBN;

--64 ORDERS2 테이블 삭제 후 생성
--ORDERID 숫자 기본키,
--CUSTID 숫자 NULL 불가,
--BOOKID 숫자 NULL 불가,
--SALEPRICE 숫자
--ORDERDATE 날짜,
--외래키(BOOKID) 참조하다 BOOK13 삭제시 연쇄삭제;

CREATE TABLE ORDERS(
ORDERID	NUMBER(2)
CUSTID	NUMBER(2)
BOOKID	NUMBER(2)
SALEPRICE	NUMBER(8)
ORDERDATE	DATE
);

DROP TABLE ORDERS2;

ROLLBACK;

CREATE TABLE ORDERS2 
(
ORDERID NUMBER PRIMARY KEY,
CUSTID NUMBER NOT NULL,
BOOKNO VARCHAR2(10) NOT NULL,
SALEPRICE NUMBER,
ORDERDATE DATE,
FOREIGN KEY(BOOKNO) REFERENCES BOOK13(BOOKID) ON DELETE CASCADE
);
