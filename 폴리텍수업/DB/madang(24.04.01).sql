--1 가장 저렴한 도서명
SELECT BOOKNAME
FROM BOOK
WHERE PRICE = (SELECT MIN(PRICE)
              FROM BOOK);
--2  전체 평균값 이상인 도서명과 정가
SELECT BOOKNAME, PRICE, (SELECT AVG(PRICE) FROM BOOK) AS "평균가" --스칼라서브쿼리
FROM BOOK
WHERE PRICE >= (SELECT AVG(PRICE)
              FROM BOOK);
              
--3 주문한 고객의 이름
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN( SELECT CUSTID
               FROM CUSTOMER);

--4 판매된 도서명
SELECT BOOKNAME
FROM BOOK
WHERE BOOKID IN (SELECT BOOKID FROM ORDERS);

--5 정가보다 더 저렴하게 판매된 도서명
SELECT A.BOOKNAME, PRICE, SALEPRICE
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PRICE > B.SALEPRICE;

--6 도서별 판매권수
--6-1 BOOKID
SELECT BOOKID, COUNT(*)
FROM ORDERS
GROUP BY BOOKID;


--6-2 BOOKNAME
SELECT BOOKNAME, COUNT(*)
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
GROUP BY BOOKNAME;

--7 고객별 주문권수
--7-1 CUSTID
SELECT CUSTID, COUNT(*)
FROM ORDERS
GROUP BY CUSTID;

--7-2 NAME
SELECT A. NAME, COUNT(*)
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
GROUP BY A. NAME;

--8 대한미디어에서 출판한 도서를 구매한 고객의 이름
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID FROM ORDERS WHERE BOOKID 
              IN(SELECT BOOKID FROM BOOK WHERE PUBLISHER = '대한미디어'));
              
              
--9 대한민국에 사는 고객이 주문한 도서명
--9-1 SUB QUERY
SELECT BOOKNAME
FROM BOOK
WHERE BOOKID IN(SELECT BOOKID FROM ORDERS WHERE CUSTID
              IN(SELECT CUSTID FROM CUSTOMER WHERE ADDRESS LIKE '%대한민국%'));

--9-2 JOIN
SELECT BOOKNAME
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE C.ADDRESㅣS LIKE '%대한민국%';

--10. 출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구하시오.
SELECT A1.BOOKNAME 
FROM BOOK A1 
WHERE A1.PRICE > (SELECT AVG(PRICE) 
                  FROM BOOK A2 
                  WHERE A2.PUBLISHER=A1.PUBLISHER);

--11. MINUS 이용해서 주문안한 고객명
SELECT NAME
FROM CUSTOMER
MINUS
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID FROM ORDERS);

--12 MINUS 이용해서 주문 안받은 도서명
SELECT BOOKNAME
FROM BOOK
MINUS
SELECT BOOKNAME
FROM BOOK
WHERE BOOKID IN(SELECT BOOKID FROM ORDERS);

--13 12번 JOIN 이용해서 풀기
SELECT A.BOOKNAME
FROM BOOK A LEFT JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE B.ORDERID IS NULL;

--14 EXISTS 사용해서 주문이 있는 고객명, 주소 (상관부속질의)
SELECT NAME, ADDRESS
FROM CUSTOMER A
WHERE EXISTS(SELECT *
              FROM ORDERS B
              WHERE A.CUSTID = B.CUSTID);
              
--15 주문 안한 고객              
SELECT NAME, ADDRESS
FROM CUSTOMER A
WHERE NOT EXISTS(SELECT *
              FROM ORDERS B
              WHERE A.CUSTID = B.CUSTID);

--16 주문 받은 도서명, 출판사, 정가(EXISTS 사용)
SELECT BOOKNAME, PUBLISHER, PRICE
FROM BOOK A
WHERE EXISTS (SELECT *
              FROM ORDERS B
              WHERE A.BOOKID=B.BOOKID); --여기에 있는애만 찍어줌

--17 주문 받지 않은 도서명, 출판사, 정가(EXISTS 사용)
SELECT BOOKNAME, PUBLISHER, PRICE
FROM BOOK A
WHERE NOT EXISTS (SELECT *
              FROM ORDERS B
              WHERE A.BOOKID=B.BOOKID); --여기에 없는애만 찍어줌

-- 연습문제 1-5박지성이 구매한 도서의 출판사 수
SELECT DISTINCT PUBLISHER, COUNT(*)
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE C.NAME LIKE '%박지성%' 
GROUP BY PUBLISHER;

-- 연습문제 1-6박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
SELECT BOOKNAME, PRICE, SALEPRICE-PRICE
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE C.NAME LIKE '%박지성%';

-- 연습문제 1-7 박지성이 구매하지 않은 도서의 이름
SELECT BOOKNAME
FROM BOOK 
MINUS
SELECT BOOKNAME
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE NOT C.NAME='%박지성%';                

-- 연습문제 2-8 주문하지 않은 고객의 이름(부속질의 사용)
--내풀이
SELECT NAME
FROM CUSTOMER
WHERE CUSTID IN(SELECT CUSTID
                FROM ORDERS
                WHERE CUSTID IS NULL);

--정답
SELECT NAME
FROM CUSTOMER
WHERE CUSTID NOT IN(SELECT CUSTID
                    FROM ORDERS);


-- 연습문제 2-9 주문 금액의 총액과 주문의 평균금액
SELECT SUM(SALEPRICE), AVG(SALEPRICE)
FROM ORDERS;

-- 연습문제 2-10 고객의 이름과 고객별 구매액
--
SELECT NAME, SUM(SALEPRICE)
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
GROUP BY A.NAME;

-- 연습문제 2-11 고객의 이름과 고객이 구매한 도서 목록
SELECT A.NAME, C.BOOKNAME
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID) JOIN BOOK C ON(B.BOOKID=C.BOOKID);

-- 연습문제 2-12 도서의 가격과 판매가격의 차이가 가장 많은 주문
SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE PRICE-SALEPRICE = (SELECT MAX(PRICE-SALEPRICE)
                  FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID));

-- 연습문제 2-13 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
SELECT NAME
FROM CUSTOMER A JOIN ORDERS B ON(A.CUSTID=B.CUSTID)
GROUP BY NAME
HAVING AVG(SALEPRICE) > (SELECT AVG(SALEPRICE)
                          FROM ORDERS);
                        
-- 18 테이블 생성
CREATE TABLE NEWBOOK(
BOOKID NUMBER,
BOOKNAME VARCHAR(20),
PUBLISHER VARCHAR2(20),
PRICE NUMBER);

DROP TABLE NEWBOOK;

-- 19 기본키 지정
CREATE TABLE NEWBOOK(
BOOKID NUMBER,
BOOKNAME VARCHAR(20),
PUBLISHER VARCHAR2(20),
PRICE NUMBER,
PRIMARY KEY (BOOKID));

DESC NEWBOOK;

DROP TABLE NEWBOOK;

--20 
CREATE TABLE NEWBOOK(
BOOKID NUMBER,
BOOKNAME VARCHAR(20),
PUBLISHER VARCHAR2(20),
PRICE NUMBER,
PRIMARY KEY (BOOKNAME, PUBLISHER));

DESC NEWBOOK;

DROP TABLE NEWBOOK;

CREATE TABLE NEWBOOK(
BOOKNAME VARCHAR(30) NOT NULL,
PUBLISHER VARCHAR2(20) UNIQUE,
PRICE NUMBER DEFAULT 10000 CHECK(PRICE>=1000),
PRIMARY KEY (BOOKNAME, PUBLISHER));

--22 NEWCUSTOMER 테이블 생성
CREATE TABLE NEWCUSTOMER(
CUSTID NUMBER PRIMARY KEY,
NAME VARCHAR2(40),
ADDRESS VARCHAR2(40),
PHONE VARCHAR2(30));

DROP TABLE NEWBOOK;
--23 NEWORDERS 테이블 생성
CREATE TABLE NEWORDERS (
ORDERID NUMBER,
CUSTID NUMBER NOT NULL,
BOOKID NUMBER NOT NULL,
SALEPRICE NUMBER,
ORDERDATE DATE,
PRIMARY KEY(ORDERID),
FOREIGN KEY(CUSTID) REFERENCES NEWCUSTOMER(CUSTID) ON DELETE CASCADE);

--24 NEWBOOK, NEWCUSTOMER, NEWORDERS 테이블 구조 확인
DESC NEWBOOK;
DESC NEWCUSTOMER;
DESC NEWORDERS;

DROP TABLE NEWBOOK;

-- NEWBOOK 새로만들기
CREATE TABLE NEWBOOK(
  BOOKID NUMBER
  , BOOKNAME VARCHAR2(30)
  , PUBLISHER VARCHAR2(20)
  , PRICE NUMBER
);

--25
ALTER TABLE NEWBOOK ADD ISBN VARCHAR2(13);
--26
ALTER TABLE NEWBOOK MODIFY ISBN NUMBER;
--27
ALTER TABLE NEWBOOK DROP COLUMN ISBN;
--28
ALTER TABLE NEWBOOK MODIFY BOOKID NUMBER NOT NULL;
--29
ALTER TABLE NEWBOOK ADD PRIMARY KEY(BOOKID);

--30
DROP TABLE NEWBOOK;
DROP TABLE NEWORDERS;
--31
DROP TABLE NEWCUSTOMER;

DROP TABLE BOOK2;


--32
INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE) 
        VALUES(11, '스포츠 의학', '한솔의학서적', 90000);
--33
INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE) 
        VALUES(14, '스포츠 의학', '한솔의학서적');

--34
INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER) 
SELECT BOOKID, BOOKNAME, PUBLISHER
FROM IMPORTED_BOOK;

--35
INSERT INTO NEWCUSTOMER
SELECT * FROM CUSTOMER;

--36
INSERT INTO NEWBOOK
SELECT * FROM BOOK;

--37
INSERT INTO NEWORDERS
SELECT * FROM ORDERS;

--38
UPDATE NEWCUSTOMER
SET ADDRESS='대한민국 부산'
WHERE CUSTID=5;

--39
UPDATE CUSTOMER SET ADDRESS=(SELECT ADDRESS FROM CUSTOMER WHERE NAME='김연아')
WHERE NAME='박세리';


--문1 새로운 도서('스포츠 세계', '대한미디어', 10000원)이 마당서점에 입고되었다.
--삽입이 안 될 경우 필요한 데이터가 더 있는지 찾아보자.
INSERT INTO BOOK VALUES(33,'스포츠 세계', '대한미디어', 10000);

--문2 '삼성당'에서 출판한 도서를 삭제해야 한다.
DELETE FROM BOOK WHERE PUBLISHER = '삼성당';

--문3 '이상미디어'에서 출판한 도서를 삭제해야 한다. 삭제가 안 될 경우 원인을 생각해보자.
DELETE FROM BOOK WHERE PUBLISHER LIKE '이상미디어';

--문4 출판사 '대한미디어'가'대한출판사'로 이름을 바꾸었다.
UPDATE BOOK SET PUBLISHER = '대한출판사' WHERE PUBLISHER = '대한미디어';

--실행취소
ROLLBACK;
---

DROP TABLE NEWBOOK;
DROP TABLE NEWORDERS;
DROP TABLE NEWCUSTOMER;

DROP TABLE BOOK2;
CREATE TABLE BOOK2 AS SELECT * FROM BOOK;

DROP TABLE CUSTOMER2;
CREATE TABLE CUSTOMER2 AS SELECT * FROM CUSTOMER;

DROP TABLE ORDERS2;
CREATE TABLE ORDERS2 AS SELECT * FROM ORDERS;

---

