--1 묘사하다. DESCRIBE
DESC BOOK;
DESCRIBE BOOK;
--BOOKID    NOT NULL NUMBER(2)    도서번호
--BOOKNAME           VARCHAR2(40) 도서명
--PUBLISHER          VARCHAR2(40) 출판사
--PRICE              NUMBER(8)    정가(가격)

--2 고객테이블 구조
DESC CUSTOMER;
--CUSTID  NOT NULL NUMBER(2)    고객번호    
--NAME             VARCHAR2(40) 고객명
--ADDRESS          VARCHAR2(50) 주소
--PHONE            VARCHAR2(20) 폰

--3 주문테이블 구조
DESC ORDERS;
--ORDERID   NOT NULL NUMBER(2)  주문번호 
--CUSTID             NUMBER(2)  고객번호
--BOOKID             NUMBER(2)  도서번호
--SALEPRICE          NUMBER(8)  판매가
--ORDERDATE          DATE       주문날짜

--4 도서정보
SELECT *
FROM BOOK;

--5 도서의 수
SELECT COUNT(*)
FROM BOOK;

--6 고객 정보
SELECT *
FROM CUSTOMER;

--7 고객의 수
SELECT COUNT(*)
FROM CUSTOMER;

--8 주문 정보
SELECT *
FROM ORDERS;

--9 판매가격이 10000원 이상인 도서 판매된 건수
SELECT COUNT(*)
FROM ORDERS
WHERE SALEPRICE >= 10000;

--10 2014년 7월 4일 주문 건수
SELECT COUNT(*)
FROM ORDERS
WHERE ORDERDATE = '2014/07/04';

--11 2014년 7월 주문 건수
SELECT COUNT(*)
FROM ORDERS
WHERE ORDERDATE BETWEEN '2014/07/04'
  AND '2014/07/31';
  
--BETWEEN A AND B

-- 시작 + E 탐색기, 좌측 네트워크 클릭, 주소:\\professor-pc 클릭/학생폴더/db
--12 키 : 
-- 후보키: 유일성, 최소성
-- 기본키: 후보키 중 선택된 키, 구분: 중복x, nullx
-- 대체키: 후보키 중 기본키 외
-- 슈퍼키: 유일성만 O 최소성 x
-- 외래키: 다른 테이블의 기본키를 참조, 중복O, null O, 없는 것을 참조할 수 x
-- 대리키: 추가

--13 무결성 제약조건
-- 데이터 무결성: 일관성, 정확성
-- 1. 도메인(domain:영역) 무결성 : 데이터 형식(숫자, 문자, 날짜 등), 널(null/not null), 기본값(default), 체크(check)
-- 2. 개체 무결성 : 기본키(pk)는 중복x, null x
-- 3. 참조 무결성 : 참조하는 것의 도메인과 같아야함. 외래키와 관계, 

--14 1번 도서가 몇 번 주문
SELECT COUNT(*)
FROM ORDERS
WHERE BOOKID = 1;

--15 주문한 고객의 번호
SELECT CUSTID
FROM ORDERS;

SELECT DISTINCT CUSTID
FROM ORDERS;

--16 대한민국에 사는 고객 정보
SELECT *
FROM CUSTOMER
WHERE ADDRESS LIKE '%대한민국%';
 
--17 판매된 도서번호(ORDERS, BOOKID)
SELECT BOOKID
FROM ORDERS;
 
--18 판매된 도서번호 (중복제거)
SELECT DISTINCT BOOKID
FROM ORDERS;

--19 도서(BOOK)와 주문(ORDERS)정보
SELECT *
FROM BOOK, ORDERS;
 
--19-0 CROSS JOIN
SELECT *
FROM BOOK,ORDERS
WHERE BOOK.BOOKID = ORDERS.BOOKID;

--19-1 ALIAS : 별칭   "comma join" 또는 "cross join"
SELECT *
FROM BOOK A,ORDERS B
WHERE A.BOOKID = B.BOOKID;
 
--19-2 INNER 생략가능
SELECT *
FROM BOOK A INNER JOIN ORDERS B ON(B.BOOKID = A.BOOKID);

SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID);

--19-3 ON이 아닌 USING 사용
SELECT *
FROM BOOK A JOIN ORDERS B USING(BOOKID);

--19-4 NATURAL JOIN
SELECT *
FROM BOOK A NATURAL JOIN ORDERS B;

--20 SELECTION( SELECT 문으로 열을 선택하고 WHERE 문으로 원하는 행을 선택한다)
SELECT *
FROM BOOK
WHERE BOOKID=1 OR BOOKID=2 OR BOOKID=3;


--21 BOOKID, BOOKNAME, PRICE => BOOK -> PROJECTION
SELECT BOOKID, BOOKNAME, PRICE
FROM BOOK;

--22 8,000원 이하인 도서를 검색하시오.
SELECT *
FROM BOOK
WHERE PRICE <= 8000;

--23 8000원 이하이면서 도서번호 3번 이상
SELECT *
FROM BOOK
WHERE PRICE <= 8000 AND BOOKID >= 3;

--24 고객의 이름, 주소, 폰
SELECT NAME, ADDRESS, PHONE
FROM CUSTOMER;

--25 도서번호, 도서명, 정가, 주문번호, 고객번호, 판매가
SELECT A.BOOKID, A.BOOKNAME, A.PRICE, B.ORDERID, B.CUSTID, B.SALEPRICE
FROM BOOK A, ORDERS B
WHERE A.BOOKID = B.BOOKID;

-- ON(소속 밝혀야함. A.BOOKID, B.BOOKID)
SELECT A.BOOKID, A.BOOKNAME, A.PRICE, B.ORDERID, B.CUSTID, B.SALEPRICE
FROM BOOK A INNER JOIN ORDERS B ON(A.BOOKID = B.BOOKID);

--B.BOOKID(X)공통속성 함께 사용, 소속 X, B.BOOKNAME(O)
SELECT BOOKID, BOOKNAME, PRICE, ORDERID, CUSTID, SALEPRICE
FROM BOOK A INNER JOIN ORDERS B USING(BOOKID);

-- 자연조인(NATURAL JOIN)
SELECT BOOKID, BOOKNAME, PRICE, ORDERID, CUSTID, SALEPRICE
FROM BOOK A NATURAL JOIN ORDERS B;

--26 주문한 고객의 정보
--주문한 고객: ORDERS
--고객 정보: CUSTOMER
SELECT A.*
FROM ORDERS A , CUSTOMER B
WHERE A.CUSTID=B.CUSTID;

--27 판매된 도서번호
SELECT BOOKID
FROM ORDERS;

--28 판매된 도서의 종류 수
SELECT COUNT(DISTINCT BOOKID)
FROM ORDERS;

--29 주문한 고객명
SELECT NAME
FROM ORDERS A JOIN CUSTOMER B ON(B.CUSTID = A.CUSTID);


--30 고객이름 순 고객정보
SELECT *
FROM CUSTOMER
ORDER BY NAME;

--GROUP BY 모아볼때
--HAVING 모아볼때 속성(?)
--ORDER BY 정렬

--31 판매가격 순 주문정보
SELECT *
FROM ORDERS
ORDER BY SALEPRICE;

--32 출판사 순 도서정보
SELECT *
FROM BOOK
ORDER BY PUBLISHER;

--33 출판사 순, 정가역순 도서정보 ASC(ASCEND), DESC(DESCEND)
SELECT *
FROM BOOK
ORDER BY PRICE DESC;

--34 주문한 고객의 이름과 전화번호
SELECT NAME, PHONE
FROM ORDERS A JOIN CUSTOMER B ON(A.CUSTID=B.CUSTID);

--35 고객번호
SELECT CUSTID
FROM CUSTOMER;

--36 주문한 고객번호
SELECT DISTINCT CUSTID
FROM ORDERS;

--37 주문을 안 한 고객번호
SELECT CUSTID
FROM CUSTOMER
MINUS
SELECT CUSTID
FROM ORDERS;

--38 고객, 주문정보 출력 하되 모든 고객 정보가 다 나오도록
SELECT *
FROM CUSTOMER A LEFT OUTER JOIN ORDERS B ON(A.CUSTID=B.CUSTID);

-- OUTER가 있는것과 없는것에 차이가 없다.
SELECT *
FROM CUSTOMER A LEFT JOIN ORDERS B ON(A.CUSTID=B.CUSTID);

--39 주문 안한 고객번호(LEFT OUTER JOIN 사용)
SELECT A.CUSTID
FROM CUSTOMER A LEFT JOIN ORDERS B ON(A.CUSTID=B.CUSTID)
WHERE B.CUSTID IS NULL;

--40 도서번호
SELECT BOOKID
FROM BOOK;

--41 판매된 도서번호
SELECT DISTINCT BOOKID
FROM ORDERS;

--42 판매가 안된 도서번호(MINUS)
SELECT BOOKID
FROM BOOK
MINUS
SELECT BOOKID
FROM ORDERS;

--43 판매가 안된 도서번호(LEFT OUTER JOIN)
SELECT A.BOOKID
FROM BOOK A LEFT JOIN ORDERS B ON(A.BOOKID=B.BOOKID)
WHERE B.BOOKID IS NULL;




