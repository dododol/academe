--1 도서정보, 주문
SELECT *
FROM BOOK, ORDERS;

SELECT *
FROM BOOK CROSS JOIN ORDERS;

--2
SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID);

--3 도서 중 대한미디어 도서정보와 주문정보
SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PUBLISHER = '대한미디어';

SELECT *
FROM BOOK NATURAL JOIN ORDERS
WHERE BOOK.PUBLISHER='대한미디어';

SELECT *
FROM BOOK JOIN ORDERS USING(BOOKID)
WHERE BOOK.PUBLISHER='대한미디어';


--4 가격이 10000~20000 사이인 도서 및 주문 정보
SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PRICE BETWEEN 10000 AND 20000;

SELECT *
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PRICE >= 10000 AND A.PRICE <= 20000;

SELECT *
FROM BOOK NATURAL JOIN ORDERS 
WHERE PRICE >= 10000 AND PRICE <= 20000;

SELECT *
FROM BOOK A JOIN ORDERS B USING(BOOKID)
WHERE A.PRICE >= 10000 AND A.PRICE <= 20000;

--, WHERE
SELECT *
FROM BOOK A, ORDERS B
WHERE A.BOOKID=B.BOOKID
AND PRICE BETWEEN 10000 AND 20000;

--5 가격이 10000~20000 사이인 도서번호, 도서명, 판매가

--, WHERE
SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE
FROM BOOK A, ORDERS B
WHERE A.BOOKID=B.BOOKID
AND PRICE BETWEEN 10000 AND 20000;

-- JOIN ON
SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE
FROM BOOK A JOIN ORDERS B ON(A.BOOKID=B.BOOKID)
WHERE A.PRICE >= 10000 AND A.PRICE <= 20000;

-- NATURAL JOIN
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK NATURAL JOIN ORDERS 
WHERE PRICE >= 10000 AND PRICE <= 20000;

-- JOIN USING
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK A JOIN ORDERS B USING(BOOKID)
WHERE A.PRICE >= 10000 AND A.PRICE <= 20000;

--6 고객정보, 주문정보 단, 주소가 미국인 고객대상
--, WHERE
SELECT *
FROM CUSTOMER A, ORDERS B
WHERE A.CUSTID=B.CUSTID
AND A.ADDRESS LIKE '%미국%';

--JOIN ON
SELECT *
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
WHERE A.ADDRESS LIKE '%미국%';

--NATURAL JOIN
SELECT *
FROM CUSTOMER NATURAL JOIN ORDERS
WHERE ADDRESS LIKE '%미국%';

--USING
SELECT *
FROM CUSTOMER A JOIN ORDERS B USING(CUSTID)
WHERE ADDRESS LIKE '%미국%';

--7 주문일이 2014년 7월인 도서번호, 도서명, 판매가

--, WHERE ( 소속 ㅇ)
SELECT A.BOOKID, BOOKNAME, SALEPRICE
FROM BOOK A, ORDERS B
WHERE A.BOOKID = B.BOOKID
AND B.ORDERDATE BETWEEN '2014-07-01' AND '2014-07-31';

SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE
FROM BOOK A, ORDERS B
WHERE A.BOOKID = B.BOOKID
AND TO_CHAR(ORDERDATE, 'YYYY/MM')='2014/07';

--JOIN ON ( 소속 ㅇ )
SELECT A.BOOKID, BOOKNAME, SALEPRICE
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE ORDERDATE BETWEEN '2014-07-01' AND '2014-07-31';

--NATURAL JOIN ( 소속 X )
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK NATURAL JOIN ORDERS
WHERE ORDERDATE BETWEEN '2014-07-01' AND '2014-07-31';

-- USING( 소속 X )
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK A JOIN ORDERS B USING(BOOKID)
WHERE B.ORDERDATE BETWEEN '2014-07-01' AND '2014-07-31';

--8 2014년 7월 1일 ~ 7월 15일 사이 주문된 도서번호, 도서명, 판매가, 주문일

--, WHERE
SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE, B.ORDERDATE
FROM BOOK A, ORDERS B
WHERE B.BOOKID = A.BOOKID
AND B.ORDERDATE BETWEEN '2014-07-01' AND '2014-07-15';

SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE, B.ORDERDATE
FROM BOOK A, ORDERS B
WHERE B.BOOKID = A.BOOKID
AND B.ORDERDATE BETWEEN TO_DATE('2014/07/01','YYYY/MM/DD') AND TO_DATE('2014/07/15','YYYY/MM/DD');


--JOIN ON
SELECT A.BOOKID, A.BOOKNAME, B.SALEPRICE, B.ORDERDATE
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE B.ORDERDATE BETWEEN '2014-07-01' AND '2014-07-15';

--NATURAL JOIN
SELECT BOOKID, BOOKNAME, SALEPRICE, ORDERDATE
FROM BOOK NATURAL JOIN ORDERS
WHERE ORDERDATE BETWEEN '2014-07-01' AND '2014-07-15';

--JOIN USING
SELECT BOOKID, BOOKNAME, SALEPRICE, ORDERDATE
FROM BOOK A JOIN ORDERS B USING(BOOKID)
WHERE B.ORDERDATE BETWEEN '2014-07-01' AND '2014-07-15';

--9 성이 박씨인 고객이 주문한 고객번호, 고객명, 판매가

--, WHERE
SELECT B.CUSTID, NAME, SALEPRICE
FROM ORDERS A, CUSTOMER B
WHERE A.CUSTID=B.CUSTID
AND B.NAME LIKE '박%';

--JOIN ON
SELECT B.CUSTID, B.NAME, A.SALEPRICE
FROM ORDERS A JOIN CUSTOMER B ON(B.CUSTID = A.CUSTID)
WHERE B.NAME LIKE '박%';

--NATURAL JOIN
SELECT CUSTID, NAME, SALEPRICE
FROM ORDERS A NATURAL JOIN CUSTOMER B
WHERE NAME LIKE '박%';

--JOIN USING
SELECT CUSTID, NAME, SALEPRICE
FROM ORDERS A JOIN CUSTOMER B USING(CUSTID)
WHERE NAME LIKE '박%';

--10 가격(정가)이 15000 이상인 도서의 주문 번호,고객번호, 고객명, 주문일

--, WHERE
SELECT B.ORDERID, C.CUSTID, C.NAME, B.ORDERDATE
FROM BOOK A, ORDERS B, CUSTOMER C
WHERE (B.BOOKID = A.BOOKID) AND (B.CUSTID=C.CUSTID)
AND A.PRICE >= 15000;

-- JOIN ON
SELECT B.ORDERID, C.CUSTID, C.NAME, B.ORDERDATE
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=B.CUSTID)
WHERE A.PRICE >= 15000;

--NATURAL JOIN
SELECT ORDERID, CUSTID, NAME, ORDERDATE
FROM BOOK A NATURAL JOIN ORDERS B NATURAL JOIN CUSTOMER C 
WHERE A.PRICE >= 15000;

--JOIN USING
SELECT ORDERID, CUSTID, NAME, ORDERDATE
FROM BOOK A JOIN ORDERS B USING(BOOKID) JOIN CUSTOMER C USING(CUSTID)
WHERE A.PRICE >= 15000;

--15 madang 계정 접속 후 전화번호 없는 고객정보
SELECT *
FROM CUSTOMER
WHERE PHONE IS NULL;

--16 도서번호가 1,3,5 인 도서번호, 도서명, 판매가

--, WHERE
SELECT B.BOOKID, B.BOOKNAME, O.SALEPRICE
FROM BOOK B, ORDERS O
WHERE B.BOOKID = O.BOOKID
AND (B.BOOKID= 1 OR B.BOOKID= 3 OR B.BOOKID= 5);

SELECT B.BOOKID, B.BOOKNAME, O.SALEPRICE
FROM BOOK B, ORDERS O
WHERE B.BOOKID = O.BOOKID
AND B.BOOKID IN(1,3,5);


--JOIN ON
SELECT B.BOOKID, B.BOOKNAME, O.SALEPRICE
FROM BOOK B JOIN ORDERS O ON(B.BOOKID = O.BOOKID)
WHERE B.BOOKID= 1 OR B.BOOKID= 3 OR B.BOOKID= 5;

SELECT B.BOOKID, B.BOOKNAME, O.SALEPRICE
FROM BOOK B JOIN ORDERS O ON(B.BOOKID = O.BOOKID)
WHERE B.BOOKID IN(1,3,5);

--NATURAL JOIN
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK B NATURAL JOIN ORDERS O 
WHERE BOOKID= 1 OR BOOKID= 3 OR BOOKID= 5;

--JOIN USING
SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK B JOIN ORDERS O USING(BOOKID)
WHERE BOOKID= 1 OR BOOKID= 3 OR BOOKID= 5;

SELECT BOOKID, BOOKNAME, SALEPRICE
FROM BOOK B JOIN ORDERS O USING(BOOKID)
WHERE BOOKID IN(1,3,5);

-- NOT > AND > OR

--17 '대한미디어' 도서이면서 가격이 30000원 이상 이거나
--   '이상미디어' 도서이면서 13000원 이하인 도서를 제외한 도서정보
SELECT *
FROM BOOK
WHERE NOT (PUBLISHER = '대한미디어' AND PRICE >= 30000 
      OR   PUBLISHER = '이상미디어' AND PRICE <= 13000);

--18 가격역순, 출판사순으로 도서번호, 도서명, 출판사, 판매가, 고객명, 가격 10000~20000 사이

--,WHERE
SELECT A.BOOKID, A.BOOKNAME, A.PUBLISHER, B.SALEPRICE, C.NAME
FROM BOOK A, ORDERS B, CUSTOMER C
WHERE B.BOOKID = A.BOOKID
AND B.CUSTID=C.CUSTID
AND B.SALEPRICE BETWEEN 10000 AND 20000
ORDER BY PRICE DESC, PUBLISHER;

--JOIN ON
SELECT A.BOOKID, A.BOOKNAME, A.PUBLISHER, B.SALEPRICE, C.NAME
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE B.SALEPRICE BETWEEN 10000 AND 20000
ORDER BY PRICE DESC, PUBLISHER;

-- NATURAL JOIN
SELECT BOOKID, BOOKNAME, PUBLISHER, SALEPRICE, NAME
FROM (BOOK A NATURAL JOIN ORDERS B) NATURAL JOIN CUSTOMER C
WHERE B.SALEPRICE BETWEEN 10000 AND 20000
ORDER BY PRICE DESC, PUBLISHER;

--JOIN USING
SELECT BOOKID, BOOKNAME, PUBLISHER, SALEPRICE, NAME
FROM BOOK A JOIN ORDERS B USING(BOOKID) JOIN CUSTOMER C USING(CUSTID)
WHERE SALEPRICE BETWEEN 10000 AND 20000
ORDER BY PRICE DESC, PUBLISHER;

--19 출판사별 도서수, 최고가, 최저가, 평균가를 구하되 건수가 2권 이상인 것 대상
SELECT PUBLISHER, COUNT(*), MAX(PRICE), MIN(PRICE), AVG(PRICE)
FROM BOOK
GROUP BY PUBLISHER
HAVING COUNT(*) >= 2;

--20 날짜별 판매건 수, 최고가, 최저가, 판매금액합계
SELECT ORDERDATE, COUNT(*), MAX(SALEPRICE), MIN(SALEPRICE), SUM(SALEPRICE)
FROM ORDERS
GROUP BY ORDERDATE;

--21 고객명별 주문건수, 최고 주문액, 최저 주문액 단, 대한민국에 사는 고객
SELECT A.NAME, COUNT(*), MAX(SALEPRICE), MIN(SALEPRICE)
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
WHERE A.ADDRESS LIKE '%대한민국%'
GROUP BY A.NAME;

--22 21번 + 주소
SELECT A.NAME, COUNT(*), MAX(SALEPRICE), MIN(SALEPRICE), ADDRESS
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
WHERE A.ADDRESS LIKE '%대한민국%'
GROUP BY A.NAME, A.ADDRESS;
-- not a GROUP BY expression -> 급을 같게 하자! 그룹함수와 함께 나오려면 GROUP BY에 적어야 함!

--23 도서명별 주문건수, 최고 판매가, 정가, 최저 판매가, 출판사를 도서명순 정렬
SELECT A.BOOKNAME, COUNT(*), MAX(SALEPRICE), A.PRICE, MIN(SALEPRICE), A.PUBLISHER
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
GROUP BY A.BOOKNAME, A.PRICE, A.PUBLISHER
ORDER BY A.BOOKNAME;

--24 대한민국에 사는 고객들의 주문액 합계, 주문건수
SELECT SUM(SALEPRICE), COUNT(*)
FROM CUSTOMER A JOIN ORDERS B ON(B.CUSTID = A.CUSTID)
WHERE A.ADDRESS LIKE '%대한민국%';

--25 굿스포츠 도서들의 평균정가, 판매된 도서종류수, 주문건수, 평균 판매가(정수로 반올림)
SELECT AVG(PRICE), B.BOOKID, COUNT(*), B.ORDERID, COUNT(*), AVG(SALEPRICE)
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PUBLISHER LIKE '%굿스포츠%'
GROUP BY B.BOOKID, B.ORDERID;

SELECT AVG(PRICE), COUNT(DISTINCT B.BOOKID), COUNT(*), B.ORDERID, COUNT(*), AVG(SALEPRICE)
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID)
WHERE A.PUBLISHER LIKE '%굿스포츠%'
GROUP BY B.BOOKID, B.ORDERID;

--  교수님 풀이
SELECT AVG(PRICE), COUNT(DISTINCT B.BOOKID), COUNT(*) AS 주문건수
FROM BOOK B JOIN ORDERS O ON(B.BOOKID=O.BOOKID)
WHERE PUBLISHER='굿스포츠';

--26 정가가 8000원 이상인 도서를 구매한 고객에 대해 고객별 주문 도서의 총 수량 
--단, 두권 이상 구매한 고객 대상, 고객의 이름 순
SELECT NAME, COUNT(*)
FROM BOOK A JOIN ORDERS B ON(B.BOOKID = A.BOOKID) JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID)
WHERE A.PRICE >= 8000
GROUP BY C.NAME
HAVING COUNT(*)>= 2
ORDER BY C.NAME;

--27 도서정보는 모두 나오고 판매도니 정보까지!
SELECT * FROM BOOK A LEFT JOIN ORDERS B ON(B.BOOKID = A.BOOKID);
--27-1 (+)사용하기 => NULL을 채워야할 곳에 (+) 넣기
SELECT * 
FROM BOOK A, ORDERS B
WHERE A.BOOKID=B.BOOKID(+);

--28 고객정보는 모두 나오고 판매된 정보까지!(RIGHT OUTER JOIN 사용)
SELECT *
FROM ORDERS A RIGHT JOIN CUSTOMER B ON(B.CUSTID = A.CUSTID);

--28-1(+) 사용하기 => NULL을 채워야할 곳에 (+) 넣기
SELECT *
FROM ORDERS A, CUSTOMER B
WHERE A.CUSTID(+)=B.CUSTID;

--29 모든 고객은 다 나오고 고객이 주문한 도서정보, 주문정보 나오게!
SELECT *
FROM CUSTOMER A LEFT JOIN ORDERS B ON(B.CUSTID = A.CUSTID) LEFT JOIN BOOK C ON(B.BOOKID=C.BOOKID);

--30 모든 도서는 다 나오고 그 도서를 주문한 고객정보, 주문정보 나오게
SELECT *
FROM BOOK A LEFT JOIN ORDERS B ON(B.BOOKID = A.BOOKID) LEFT JOIN CUSTOMER C ON(B.CUSTID=C.CUSTID);









